#!/usr/bin/env python

import MySQLdb
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes
import logging


main_conn = MySQLdb.connect(
  host=os.getenv('MYSQL_ADDR'),
  user=os.getenv('MYSQL_USER'),
  password=os.getenv('MYSQL_PASS'),
  database=os.getenv('MYSQL_DATABASE')
)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã:
main_keyboard = [
  [InlineKeyboardButton("üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="1")],
  [InlineKeyboardButton("üóø –°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏", callback_data="2")],
  [InlineKeyboardButton("üíØ –í–∞–∫–∞–Ω—Å–∏–∏", callback_data="3")],
]
back_keyboard = [
  [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="0")]
]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞."""
  reply_markup = InlineKeyboardMarkup(main_keyboard)
  await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –±–æ—Ç–µ –¶–µ–Ω—Ç—Ä–∞ –ö–∞—Ä—å–µ—Ä—ã! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)


def get_posts(post_query_type: str) -> list[dict]:
  """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç—ã –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
  posts = []
  with main_conn.cursor() as cursor:
    select_query = 'SELECT * FROM posts WHERE type = %s ORDER BY id DESC LIMIT 10'
    data = (post_query_type,)
    cursor.execute(select_query, data)
    events = cursor.fetchall()
    if events:
      for event in events:
        posts.append(
          {'text': event[1], 'type': event[3]}
        )
  posts.reverse()  # –ù–æ–≤—ã–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç —Å–≤–µ—Ä—Ö—É, –∞ –Ω–µ —Å–Ω–∏–∑—É
  return posts


def generate_scheduled_keyboard(num_of_buttons: int):
  """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ç—Ä–∏ —Ä—è–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–æ–≤."""
  reply_keyboard = []
  for i in range(num_of_buttons):
    if i in (0, 3, 6, 9):
      reply_keyboard.append([InlineKeyboardButton(str(i + 1), callback_data=f"get_scheduled_{i}")])
    else:
      reply_keyboard[-1].append(InlineKeyboardButton(str(i + 1), callback_data=f"get_scheduled_{i}"))
  return reply_keyboard


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–∞ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞."""
  query = update.callback_query
  await query.answer()
  if query.data == "0":
    context.user_data["scheduled"] = None
    context.user_data["posts_type"] = None
    reply_markup = InlineKeyboardMarkup(main_keyboard)
    await query.edit_message_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –±–æ—Ç–µ –¶–µ–Ω—Ç—Ä–∞ –ö–∞—Ä—å–µ—Ä—ã! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
  elif query.data in ("1", "2", "3", "showed"):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω—É–∂–Ω–æ–π —Ç–µ–º–æ–π
    posts = []
    post_query_type = None
    posts_type = ''
    if query.data == "showed":
      posts = context.user_data.get("scheduled")
      posts_type = context.user_data.get("posts_type")
      if posts_type == '1': post_query_type = '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
      elif posts_type == '2': post_query_type = '—Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏'
      else: post_query_type = '–≤–∞–∫–∞–Ω—Å–∏–∏'
    else:
      if query.data == '1': post_query_type = '–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
      elif query.data == '2': post_query_type = '—Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏'
      else: post_query_type = '–≤–∞–∫–∞–Ω—Å–∏–∏'
      posts = get_posts(post_query_type)
      context.user_data["scheduled"] = posts
      context.user_data["posts_type"] = query.data
      posts_type = query.data
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    reply_text = f'–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ {post_query_type}:' if posts_type == '1' else f'–î–æ—Å—Ç—É–ø–Ω—ã–µ {post_query_type}:'
    for i in range(len(posts)):
      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –ø–æ—Å—Ç–æ–≤
      shortened = posts[i]['text'][:128].strip().replace('\n', ' ')
      tripledot = '...' if len(shortened) != len(posts[i]['text']) else ''
      reply_text += f'\n\nüîπ{i+1}. {shortened}{tripledot}'
    if not len(posts): reply_text += '\n\nüîπ–ü–æ–∫–∞ —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç...'
    reply_keyboard = generate_scheduled_keyboard(len(posts))
    reply_keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="0")])
    reply_markup = InlineKeyboardMarkup(reply_keyboard)
    await query.edit_message_text(reply_text, reply_markup=reply_markup)
  elif "get_scheduled_" in query.data:
    # –û—Ç–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω—ã–π –µ–º—É –ø–æ—Å—Ç
    num = int(query.data.replace('get_scheduled_', ''))
    post = context.user_data.get("scheduled")[num]
    reply_keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="showed")]]
    reply_markup = InlineKeyboardMarkup(reply_keyboard)
    await query.edit_message_text(post['text'], reply_markup=reply_markup)


def main() -> None:
  """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
  application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()
  application.add_handler(CommandHandler("start", start))
  application.add_handler(CallbackQueryHandler(button))
  application.run_polling()
  print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.')


if __name__ == '__main__':
  main()
