#!/usr/bin/env python

# import mysql.connector
import secrets
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes
import logging

# mydb = mysql.connector.connect(
#   host=secrets.MYSQL_ADDR,
#   user=secrets.MYSQL_USER,
#   password=secrets.MYSQL_PASS
# )

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

main_keyboard = [
  [InlineKeyboardButton("üìÖ–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="1")],
  [InlineKeyboardButton("üóø–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏", callback_data="2")],
  [InlineKeyboardButton("üíØ–í–∞–∫–∞–Ω—Å–∏–∏", callback_data="3")],
]

back_keyboard = [
  [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="0")]
]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞."""
  reply_markup = InlineKeyboardMarkup(main_keyboard)
  await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –±–æ—Ç–µ –¶–µ–Ω—Ç—Ä–∞ –ö–∞—Ä—å–µ—Ä—ã! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """Parses the CallbackQuery and updates the message text."""
  query = update.callback_query
  await query.answer()
  if query.data == "0":
    reply_markup = InlineKeyboardMarkup(main_keyboard)
    await query.edit_message_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –±–æ—Ç–µ –¶–µ–Ω—Ç—Ä–∞ –ö–∞—Ä—å–µ—Ä—ã! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
  elif query.data == "1":
    reply_markup = InlineKeyboardMarkup(back_keyboard)
    await query.edit_message_text("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\nüîπ–ü–æ–∫–∞ —á—Ç–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç.", reply_markup=reply_markup)
  elif query.data == "2":
    reply_markup = InlineKeyboardMarkup(back_keyboard)
    await query.edit_message_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:\n\nüîπ–ü–æ–∫–∞ —á—Ç–æ —Å—Ç–∞–∂–∏—Ä–æ–≤–æ–∫ –Ω–µ—Ç.", reply_markup=reply_markup)
  elif query.data == "3":
    reply_markup = InlineKeyboardMarkup(back_keyboard)
    await query.edit_message_text("–û—Ç–∫—Ä—ã—Ç—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n\nüîπ–ü–æ–∫–∞ —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç.", reply_markup=reply_markup)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """Displays info on how to use the bot."""
  await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.")


def main() -> None:
  """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
  application = Application.builder().token(secrets.TELEGRAM_TOKEN).build()
  application.add_handler(CommandHandler("start", start))
  application.add_handler(CallbackQueryHandler(button))
  application.add_handler(CommandHandler("help", help_command))
  print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.')
  application.run_polling()


if __name__ == '__main__':
  main()
