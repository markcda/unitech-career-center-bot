#!/usr/bin/env python

# import mysql.connector
import secrets
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes, MessageHandler
import logging

# mydb = mysql.connector.connect(
#   host=secrets.MYSQL_ADDR,
#   user=secrets.MYSQL_USER,
#   password=secrets.MYSQL_PASS,
#   database=secrets.MYSQL_DATABASE
# )

# –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
# cur = mydb.cursor()
# cur.execute("CREATE TABLE IF NOT EXISTS events (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), text VARCHAR)")
# cur.execute("CREATE TABLE IF NOT EXISTS internships (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), text VARCHAR)")
# cur.execute("CREATE TABLE IF NOT EXISTS vacancies (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), text VARCHAR)")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã:
main_keyboard = [
  [InlineKeyboardButton("üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="1")],
  [InlineKeyboardButton("üóø –°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏", callback_data="2")],
  [InlineKeyboardButton("üíØ –í–∞–∫–∞–Ω—Å–∏–∏", callback_data="3")],
]
admin_keyboard = [
  [InlineKeyboardButton("üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="1")],
  [InlineKeyboardButton("üóø –°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏", callback_data="2")],
  [InlineKeyboardButton("üíØ –í–∞–∫–∞–Ω—Å–∏–∏", callback_data="3")],
  [InlineKeyboardButton("üÜï –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="adm")]
]
admin_actions_keyboard = [
  [InlineKeyboardButton("üìé –î–æ–±–∞–≤–∏—Ç—å...", callback_data="adm_add")],
  [InlineKeyboardButton("üö´ –£–¥–∞–ª–∏—Ç—å...", callback_data="adm_del")],
  [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="0")]
]
admin_add_actions_keyboard = [
  [InlineKeyboardButton("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="add_vnt")],
  [InlineKeyboardButton("–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞", callback_data="add_int")],
  [InlineKeyboardButton("–í–∞–∫–∞–Ω—Å–∏—è", callback_data="add_vcn")],
  [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="adm")]
]
back_keyboard = [
  [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="0")]
]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞."""
  if context.user_data.get("adm", False):
    reply_markup = InlineKeyboardMarkup(admin_keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –±–æ—Ç–µ –¶–µ–Ω—Ç—Ä–∞ –ö–∞—Ä—å–µ—Ä—ã! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
  else:
    reply_markup = InlineKeyboardMarkup(main_keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –±–æ—Ç–µ –¶–µ–Ω—Ç—Ä–∞ –ö–∞—Ä—å–µ—Ä—ã! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
  text = update.message.text
  if text == secrets.ADMIN_SECRET:
    context.user_data["adm"] = True
  elif context.user_data.get("adding_init", False):
    pass
  elif context.user_data.get("adding_set_title", False):
    pass
  elif context.user_data.get("adding_set_text", False):
    pass


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
  """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–∞ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞."""
  query = update.callback_query
  await query.answer()
  if query.data == "0":
    # –ù–∞—á–∞–ª–æ
    if context.user_data.get("adm", False):
      reply_markup = InlineKeyboardMarkup(admin_keyboard)
      await query.edit_message_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –±–æ—Ç–µ –¶–µ–Ω—Ç—Ä–∞ –ö–∞—Ä—å–µ—Ä—ã! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
    else:
      reply_markup = InlineKeyboardMarkup(main_keyboard)
      await query.edit_message_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –±–æ—Ç–µ –¶–µ–Ω—Ç—Ä–∞ –ö–∞—Ä—å–µ—Ä—ã! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
  elif query.data == "1":
    # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    reply_markup = InlineKeyboardMarkup(back_keyboard)
    await query.edit_message_text("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\nüîπ–ü–æ–∫–∞ —á—Ç–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç.", reply_markup=reply_markup)
  elif query.data == "2":
    # –°—Ç–∞–∂–∏—Ä–æ–≤–∫–∏
    reply_markup = InlineKeyboardMarkup(back_keyboard)
    await query.edit_message_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏:\n\nüîπ–ü–æ–∫–∞ —á—Ç–æ —Å—Ç–∞–∂–∏—Ä–æ–≤–æ–∫ –Ω–µ—Ç.", reply_markup=reply_markup)
  elif query.data == "3":
    # –í–∞–∫–∞–Ω—Å–∏–∏
    reply_markup = InlineKeyboardMarkup(back_keyboard)
    await query.edit_message_text("–û—Ç–∫—Ä—ã—Ç—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n\nüîπ–ü–æ–∫–∞ —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç.", reply_markup=reply_markup)
  elif query.data == "adm":
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    if not context.user_data.get("adm", False): return
    reply_markup = InlineKeyboardMarkup(admin_actions_keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
  elif query.data == "adm_add":
    pass


def main() -> None:
  """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
  application = Application.builder().token(secrets.TELEGRAM_TOKEN).build()
  application.add_handler(CommandHandler("start", start))
  application.add_handler(CallbackQueryHandler(button))
  application.add_handler(MessageHandler(None, handle_text))
  print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.')
  application.run_polling()


if __name__ == '__main__':
  main()
